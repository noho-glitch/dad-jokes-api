{"version":3,"sources":["components/Joke/Joke.js","components/JokeList/JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","joke","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","console","log","handleClick","bind","length","getJokes","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","has","push","id","uuid","setState","st","setItem","stringify","alert","delta","sortedJokes","sort","a","b","src","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ecf3f5d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Joke.css\";\n\nclass Joke extends Component {\n    getColor() {\n        if (this.props.votes >= 15) {\n          return \"#4CAF50\";\n        } else if (this.props.votes >= 12) {\n          return \"#8BC34A\";\n        } else if (this.props.votes >= 9) {\n          return \"#CDDC39\";\n        } else if (this.props.votes >= 6) {\n          return \"#FFEB3B\";\n        } else if (this.props.votes >= 3) {\n          return \"#FFC107\";\n        } else if (this.props.votes >= 0) {\n          return \"#FF9800\";\n        } else {\n          return \"#f44336\";\n        }\n      }\n      getEmoji() {\n        if (this.props.votes >= 15) {\n          return \"em em-rolling_on_the_floor_laughing\";\n        } else if (this.props.votes >= 12) {\n          return \"em em-laughing\";\n        } else if (this.props.votes >= 9) {\n          return \"em em-smiley\";\n        } else if (this.props.votes >= 6) {\n          return \"em em-slightly_smiling_face\";\n        } else if (this.props.votes >= 3) {\n          return \"em em-neutral_face\";\n        } else if (this.props.votes >= 0) {\n          return \"em em-confused\";\n        } else {\n          return \"em em-angry\";\n        }\n      }\n  render() {\n    return (\n      <div className=\"Joke\">\n        <div className=\"Joke-buttons\">\n          <i className=\"fas fa-arrow-up\" onClick={this.props.upvote} />\n          <span className=\"Joke-votes\" style={{ borderColor: this.getColor() }}>\n            {this.props.votes}\n          </span>\n          <i className=\"fas fa-arrow-down\" onClick={this.props.downvote} />\n        </div>\n        <div className=\"Joke-text\">{this.props.joke}</div>\n        <div className=\"Joke-smiley\">\n          <i className={this.getEmoji()} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Joke;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./JokeList.css\";\nimport Joke from \"../Joke/Joke\";\nimport uuid from \"uuid/v4\";\n\nclass JokeList extends Component {\n  static defaultProps = {\n    numJokesToGet: 10\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\n      loading: false\n    };\n    this.seenJokes = new Set(this.state.jokes.map(j => j.joke));\n    console.log(this.seenJokes);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentDidMount() {\n    if (this.state.jokes.length === 0) {\n      this.getJokes();\n    }\n  }\n  async getJokes() {\n    try {\n      let jokes = [];\n      while (jokes.length < this.props.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com/\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let newJoke = res.data.joke;\n        if (!this.seenJokes.has(newJoke)) {\n          jokes.push({\n            id: uuid(),\n            joke: newJoke,\n            votes: 0\n          });\n        } else {\n          console.log(`Duplicate Joke Not Added: ${newJoke}`);\n        }\n        //   console.log(jokes);\n      }\n      this.setState(\n        st => ({\n          loading: false,\n          jokes: [...st.jokes, ...jokes]\n        }),\n        () =>\n          window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n      );\n    } catch (e) {\n      alert(e);\n      this.setState({ loading: false });\n    }\n  }\n  handleVote(id, delta) {\n    this.setState(\n      st => ({\n        jokes: st.jokes.map(j =>\n          j.id === id ? { ...j, votes: j.votes + delta } : j\n        )\n      }),\n      () =>\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n    );\n  }\n  handleClick() {\n    this.setState({ loading: true }, this.getJokes);\n  }\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"JokeList-spinner\">\n          <i className=\"far fa-8x fa-laugh fa-spin\" />\n          <h1 className=\"JokeList-title\">Loading...</h1>\n        </div>\n      );\n    }\n    let sortedJokes = this.state.jokes.sort((a,b) => b.votes - a.votes);\n    return (\n      <div className=\"JokeList\">\n        <div className=\"JokeList-sidebar\">\n          <h1 className=\"JokeList-title\">\n            <span>Dad</span> Jokes\n          </h1>\n          <img src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" />\n          <button className=\"JokeList-getmore\" onClick={this.handleClick}>\n            Fetch Jokes\n          </button>\n        </div>\n\n        <div className=\"JokeList-jokes\">\n          {sortedJokes.map(j => (\n            <Joke\n              key={j.id}\n              votes={j.votes}\n              joke={j.joke}\n              upvote={() => this.handleVote(j.id, 1)}\n              downvote={() => this.handleVote(j.id, -1)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default JokeList;\n","import React from 'react';\nimport JokeList from './components/JokeList/JokeList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}